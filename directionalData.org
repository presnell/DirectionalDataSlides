#+TITLE: Analysis of Directional Data
#+AUTHOR: Brett Presnell
#+DATE: <2015-09-14 Mon>
#+EMAIL: presnell@ufl.edu

#+OPTIONS: toc:nil h:2 num:1
#+STARTUP: beamer

#+PROPERTY: header-args:R :session *R* :cache no :eval yes :noweb yes

 # Not sure if this is the best way to handle this or not.  Note that
 # ":cache yes" turns off ":eval yes", and requires manual evaluation
 # of the code blocks.  So for calculations that we want to cache, set
 # ":cache yes" on the SRC environment and manually evalute that
 # environment.

* COMMENT LaTeX Header							   :noexport:

#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [presentation]

 # Replace the previous two lines with the following three line for
 # article style export of beamer slides.
 # 
 # #+LaTeX_CLASS: article
 # #+LaTeX_CLASS_OPTIONS: [letterpaper,11pt]
 # #+LATEX_HEADER: \usepackage{beamerarticle}

 # By default, beamer does not number figure and table environments in
 # presentations (but it does nubmer then in beamerarticle). This can
 # be changed with
 # 
 # #+LaTeX: \setbeamertemplate{caption}[numbered]
 # 
 # On the other hand, if we don't want the numbers, then maybe we
 # don't want the "Figure" and "Table" labels either.  These can be
 # eliminated altogether with
 # 
 # #+LaTeX: \setbeamertemplate{caption}{\raggedright\insertcaption\par}

#+LaTeX: \setbeamertemplate{caption}[numbered]

#+LaTeX_HEADER: \usepackage{amsmath}
#+LaTeX_HEADER: \DeclareMathOperator{\nlangevin}{L}
#+LaTeX_HEADER: \DeclareMathOperator{\npn}{PN}

* Introduction

#+NAME: R-set-up
#+BEGIN_SRC R :exports none
require("circular")
require("ascii")
options(asciiType="org")
datadir <- "../Data/"
datafile <- function(filename, dir=datadir) {
    paste(datadir, filename, sep="")
}
#+END_SRC

** Examples

Wish to analyze data in which response is a "direction":

 - 2d directional data are called /circular/ data
 - 3d directional data are called /spherical/ data
 - not all "directional" data are directions in the usual sense
 - "directional" data may also arise in higher dimensions

** Wind Directions

 - Recorded at  Col de la Roa, Italian Alps
 - n = 310 (first 40 listed below)
 - Radians, clockwise from north
 - Source: Agostinelli (CSDA 2007); also R package =circular=

*** Data
    :PROPERTIES:
    :BEAMER_col: 0.5
    :END:

#+BEGIN_SRC R :results output raw :exports results
ascii(matrix(wind[1:40], ncol=5, byrow=TRUE), digits=2,
      include.rownames=FALSE, include.colnames=FALSE)
#+END_SRC

#+RESULTS:
 | 6.23 | 1.03 | 0.15 | 0.72 | 2.20 |
 | 0.46 | 0.63 | 1.45 | 0.37 | 1.95 |
 | 0.08 | 0.15 | 0.33 | 0.09 | 0.09 |
 | 6.23 | 0.05 | 6.14 | 6.28 | 6.17 |
 | 6.24 | 6.02 | 6.14 | 6.25 | 0.01 |
 | 5.38 | 5.30 | 5.63 | 0.77 | 1.34 |
 | 6.14 | 0.22 | 6.23 | 2.33 | 3.61 |
 | 0.49 | 6.12 | 0.01 | 0.00 | 0.46 |

*** Plot
    :PROPERTIES:
    :BEAMER_col: 0.5
    :END:

#+NAME: windConvert
#+BEGIN_SRC R :exports none
windc <- circular(wind, type="angles", units="radians",
                  template="geographics")
#+END_SRC

#+NAME: windDataPlot
#+HEADER: :file Plots/wind.png :width 480 :height 480
#+BEGIN_SRC R :exports results :results output graphics
require("circular")
par(mar=c(0,0,0,0)+0.1, oma=c(0,0,0,0)+0.1)
plot(windc, cex=1.5, axes=FALSE,
     bin=360, stack=TRUE, sep=0.035, shrink=1.3)
axis.circular(at=circular(seq(0, (7/4)*pi, pi/4),
                  template="geographics"),
              labels=c("N","NE","E","SE","S","SW","W","NW"),
              cex=1.4)
ticks.circular(circular(seq(0, (15/8)*pi, pi/8)),
               zero=pi/2, rotation="clock",
               tcl=0.075)
#+END_SRC

#+RESULTS: windDataPlot
[[file:Plots/wind.png]]

** Arrival Times at an ICU

 - 24-hour clock times (format =hrs.mins=)
 - n = 254 (first 32 listed below)
 - Source: Cox & Lewis (1966); also Fisher (1993) and R package
   =circular=
   
*** Data
    :PROPERTIES:
    :BEAMER_col: 0.5
    :END:

#+BEGIN_SRC R :results output raw :exports results
ascii(matrix(fisherB1[1:32], ncol=4, byrow=TRUE), digits=2,
      include.rownames=FALSE, include.colnames=FALSE)
#+END_SRC

#+RESULTS:
 | 11.00 | 17.00 | 23.15 | 10.00 |
 | 12.00 |  8.45 | 16.00 | 10.00 |
 | 15.30 | 20.20 |  4.00 | 12.00 |
 |  2.20 | 12.00 |  5.30 |  7.30 |
 | 12.00 | 16.00 | 16.00 |  1.30 |
 | 11.05 | 16.00 | 19.00 | 17.45 |
 | 20.20 | 21.00 | 12.00 | 12.00 |
 | 18.00 | 22.00 | 22.00 | 22.05 |

*** Plot
    :PROPERTIES:
    :BEAMER_col: 0.5
    :END:

#+NAME: icuDataPlot
#+HEADER: :file Plots/icu.png
#+BEGIN_SRC R :exports results :results output graphics
## Note that pch=17 does not work properly here.
par(mar=c(0,0,0,0)+0.1, oma=c(0,0,0,0)+0.1)
plot(fisherB1c, cex=1.5, axes=TRUE,
     bin=360, stack=TRUE, sep=0.035, shrink=1.3)
#+END_SRC

#+RESULTS: icuDataPlot
[[file:Plots/icu.png]]

** Primate Vertebrae

 - Orientation of left superior facet of last lumbar vertebra in
   humans, gorillas, and chimpanzees
 - Source: Keifer (2005 UF Anthropology MA Thesis)

#+CAPTION: Human lumbar vertebra with right superior facet labelled
#+CAPTION: as superior articulate process.
#+ATTR_LaTeX: :height 0.5\textheight
[[file:Pictures/Gray93.png]]

** Plot of Human Data
   :PROPERTIES:
   :BEAMER_env: fullframe
   :END:

#+BEGIN_SRC R :exports none :eval no
vertebrae <- read.table(datafile("vertebrae-superior-facet.txt"), header=TRUE)
vcol <- rep(c("red","green","blue"), table(vertebrae$species))
require("sphereplot")
rgl.sphgrid(radius=1,
            col.long="red", col.lat="blue",
            deggap=30,
            longtype="D", radaxis=FALSE)
points3d(vertebrae[,-1], col=vcol, size=6.0)
rglproj.sav <- rgl.projection()
rgl.snapshot("vertebraeOnSphere.png")
rgl.close()
#+END_SRC

#+CAPTION: Orientation of left superior facets for samples of 18
#+CAPTION: chimpanzees (red), 16 gorillas (green) and 19 humans (blue).
#+ATTR_LaTeX: :height 0.75\textheight
[[file:Pictures/vertebraeOnSphere.png]]

** Butterfly Migrations

 - Direction of travel observed for 2649 migrating butterflies in
   Florida
 - Source: Thomas J Walker, University of Florida, Dept of Entomology
   and Nematology
 - Other variables:
   - site: 23 locations in Florida
   - observer: Thomas Walker (tw) or James J. Whitesell (jw)
   - species: cloudless sulphur (cs), gulf fritillary (gf),
     long-tailed skipper (lt)
   - distance to coast (km)
   - date and time of observation
   - percentage of sky free of clouds
   - quality of sunlight: (b)right, (h)aze, (o)bstructed, (p)artly
     obstructed
   - presence/absence and direction (N, NE, E, SE, S, SW, W, NW) of wind
   - temperature

#+BEGIN_SRC R :exports none
butterflies <- read.table(datafile("butterfly.txt"), header=TRUE)
#+END_SRC

** Why is the Analysis of Directional Data Different?

 - First three observations from the wind directions data:
   src_R{paste(round(wind[1:3], 2), collapse=", ")}
 - The mean of these three numbers is
   src_R{round(mean(wind[1:3]), 2)} {{{results(=2.47=)}}}
 - What do you think?

#+NAME: meanAnglePlot
#+HEADER: :file Plots/meanAngle.png
#+BEGIN_SRC R :exports results :results output graphics
par(mar=c(0,0,0,0)+0.1, oma=c(0,0,0,0)+0.1)
plot(windc[1:3], cex=2, lwd=1.5, axes=TRUE, ticks=TRUE, tcl=0.05)
points(circular(mean(wind[1:3]), units="radians", template="geographics"),
       pch=8, cex=4) 
#+END_SRC

#+ATTR_LaTeX: :height 0.5\textheight
#+RESULTS: meanAnglePlot
[[file:Plots/meanAngle.png]]

* Graphical Display of Directional Data

** Graphical Display of Circular Data (in R)

  - Have already seen simple dot plots for circular data, e.g., for
    the wind data:

#+BEGIN_SRC R :exports code :eval no
<<windConvert>>
<<windDataPlot>>
#+END_SRC

** Graphical Display of Circular Data (in R) (ctd)
   :PROPERTIES:
   :BEAMER_env: fullframe
   :END:

  - and for the ICU data:

#+BEGIN_SRC R :exports code :eval no
<<icuDataPlot>>
#+END_SRC

  - and one more ...

** Graphical Display of Circular Data (in R) (ctd)
   :PROPERTIES:
   :BEAMER_env: fullframe
   :END:

#+NAME: antsDataPlot
#+HEADER: :file Plots/ants.png
#+BEGIN_SRC R :exports results :results output graphics
par(mar=c(0,0,0,0)+0.1, oma=c(0,0,0,0)+0.1)
plot(fisherB10c$set1, units="degrees", zero=pi/2,
     rotation="clock", pch=16, cex=1.5)
ticks.circular(circular(seq(0, (11/6)*pi, pi/6)),
               zero=pi/2, rotation="clock", tcl=0.075)
points(fisherB10c$set2, zero=pi/2,
       rotation="clock", pch=16, col="darkgrey",
       next.points=-0.1, cex=1.5)
points(fisherB10c$set3, zero=pi/2,
       rotation="clock", pch=1,
       next.points=0.1, cex=1.5)
#+END_SRC

#+CAPTION: Walking directions of long-legged desert ants under
#+CAPTION: three different experimental conditions:
#+ATTR_LaTeX: :height 0.6\textheight
#+RESULTS: antsDataPlot
[[file:Plots/ants.png]]

** Graphical Display of Circular Data (in R) (ctd)
   :PROPERTIES:
   :BEAMER_env: fullframe
   :END:

#+BEGIN_SRC R :exports code :eval no
<<antsDataPlot>>
#+END_SRC

** Circular Histograms

  - [[https://www.google.com/search?q=R+circular+histogram][Circular histograms]] exist (see Fisher and Mardia and Jupp) but is
    there a ready-made function in R?

** Rose Diagrams

  - Invented by [[https://en.wikipedia.org/wiki/Florence_Nightingale][Florence Nightingale]] (elected first female member of
    the Royals Statistical Society in 1859; honorary member of ASA)
  - [[https://github.com/jennybc/r-graph-catalog/tree/master/figures/fig05-14_nightingale-data][Nightingale's rose in R]] (see also [[http://www.r-bloggers.com/going-beyond-florence-nightingales-data-diagram-did-flo-blow-it-with-wedges/][this post]] and the [[http://shiny.stat.ubc.ca/r-graph-catalog/][R graph catalog]])
  - Note that radii of segments are proportional to /square root/ of
    the frequencies (counts), so that areas are proportional to
    frequencies.  Is this the right thing to do?
  - Rose diagrams suffer from the same problems as histograms.  The
    impression conveyed may depend strongly on:
    - the binwidth of the cells
    - the choice of starting point for the bins

** Adding a Rose Diagram to the Plot of Wind Directions

#+NAME: windRosePart
#+BEGIN_SRC R :exports code :eval no
rose.diag(windc, bins=16, col="darkgrey",
          cex=1.5, prop=1.35, add=TRUE)
#+END_SRC

** Adding a Rose Diagram to the Plot of Wind Directions
   :PROPERTIES:
   :BEAMER_env: fullframe
   :END:

#+NAME: windRose
#+HEADER: :file Plots/windRose.png
#+BEGIN_SRC R :exports results :results output graphics
<<windDataPlot>>
<<windRosePart>>
#+END_SRC

#+CAPTION: Wind direction data with rose diagram
#+CAPTION: with segment areas are proportional to counts
#+CAPTION: (segment radii are proportional to square roots of counts).
#+ATTR_LaTeX: :height 0.7\textheight
#+RESULTS: windRose
[[file:Plots/windRose.png]]

** Changing the Binwidth

#+NAME: windRoseWideBinsPart
#+BEGIN_SRC R :exports none :eval no
rose.diag(windc, bins=8, col="darkgrey",
          cex=1.5, prop=1.15, add=TRUE)
#+END_SRC

#+NAME: windRoseNarrowBinsPart
#+BEGIN_SRC R :exports none :eval no
rose.diag(windc, bins=32, col="darkgrey",
          cex=1.5, prop=1.7, add=TRUE)
#+END_SRC

*** Fewer/Wider Bins
    :PROPERTIES:
    :BEAMER_col: 0.48
    :END:

#+NAME: windRoseWideBins
#+HEADER: :file Plots/windRoseWide.png
#+BEGIN_SRC R :exports results :results output graphics
<<windDataPlot>>
<<windRoseWideBinsPart>>
#+END_SRC

#+RESULTS: windRoseWideBins
[[file:Plots/windRoseWide.png]]

*** Narrow Bins
    :PROPERTIES:
    :BEAMER_col: 0.48
    :END:

#+NAME: windRoseNarrowBins
#+HEADER: :file Plots/windRoseNarrow.png
#+BEGIN_SRC R :exports results :results output graphics
<<windDataPlot>>
<<windRoseNarrowBinsPart>>
#+END_SRC

#+RESULTS: windRoseNarrowBins
[[file:Plots/windRoseNarrow.png]]

** Changing the Radii

 - I think that the default "radii proportional to counts" is
   generally best, but this is not always obvious.  The scale
   certainly makes a big difference however.

#+NAME: windRoseLinearPart
#+BEGIN_SRC R :exports code :eval no
rose.diag(windc, bins=16, col="darkgrey",
          radii.scale="linear",
          cex=1.5, prop=2.4, add=TRUE)
#+END_SRC

** Changing the Radii
   :PROPERTIES:
   :BEAMER_env: fullframe
   :END:

#+NAME: windRoseLinear
#+HEADER: :file Plots/windRoseLinear.png
#+BEGIN_SRC R :exports results :results output graphics
<<windDataPlot>>
<<windRoseLinearPart>>
#+END_SRC

#+CAPTION: Wind direction data with rose diagram
#+CAPTION: (segment radii proportional to counts).
#+ATTR_LaTeX: :height 0.7\textheight
#+RESULTS: windRoseLinear
[[file:Plots/windRoseLinear.png]]

** Kernel Density Estimates

#+NAME: windKdensPart
#+BEGIN_SRC R :exports code :eval no
lines(density.circular(windc, bw=40), lwd=2, lty=1)
#+END_SRC

** Kernel Density Estimates
   :PROPERTIES:
   :BEAMER_env: fullframe
   :END:

#+NAME: windKdens
#+HEADER: :file Plots/windKdens.png
#+BEGIN_SRC R :exports results :results output graphics
par(mar=c(0,0,0,0)+0.1, oma=c(0,0,0,0)+0.1)
plot(windc, cex=1.5, axes=FALSE,
     bin=360, stack=TRUE, sep=0.035, shrink=1.7)
axis.circular(at=circular(seq(0, (7/4)*pi, pi/4),
                  template="geographics"),
              labels=c("N","NE","E","SE","S","SW","W","NW"),
              cex=1.4)
ticks.circular(circular(seq(0, (15/8)*pi, pi/8)),
               ## zero=pi/2, rotation="clock",
               tcl=0.075)
<<windRosePart>>
<<windKdensPart>>
#+END_SRC

#+CAPTION: Wind direction data with rose diagram
#+CAPTION: and kernel density estimate.
#+ATTR_LaTeX: :height 0.7\textheight
#+RESULTS: windKdens
[[file:Plots/windKdens.png]]

** Spherical Data

 - Are there any canned routines for plotting spherical data in R?

* Basic Summary Statistics

** Mean Direction and Mean Resultant Length

 - First three observations from the wind directions data:
#+BEGIN_SRC R :results output raw :exports results
theta <- wind[1:3]
x <- sin(theta)
y <- cos(theta)
ascii(cbind(theta, x, y), digits=2,
      include.rownames=FALSE, include.colnames=TRUE)
#+END_SRC

#+RESULTS:
 | theta |     x |    y |
 |  6.23 | -0.06 | 1.00 |
 |  1.03 |  0.86 | 0.51 |
 |  0.15 |  0.15 | 0.99 |


#+BEGIN_SRC R :exports none
xsum <- sum(x); ysum <- sum(y)
xbar <- mean(x); ybar <- mean(y)
resultant <- c(xsum, ysum)
resultantLength <- sqrt(sum(resultant^2))
meanResultant <- c(xbar, ybar)
meanResultantLength <- sqrt(sum(meanResultant^2))
meanDirection <- meanResultant/meanResultantLength
meanDirectionRadians <- atan2(meanDirection[1], meanDirection[2])
#+END_SRC

 - resultant (sum of direction vectors):
   (src_R{round(xsum, 3)},
   src_R{round(ysum, 3)})

 - mean vector: \((\bar{x}, \bar{y}) = \)
   (src_R{round(xbar, 3)},
   src_R{round(ybar, 3)})

 - resultant length (Euclidean norm of resultant): R = 
   src_R{round(resultantLength, 3)}

 - mean resultant length: \(\bar{R} = \)
   src_R{round(meanResultantLength, 3)}

 - mean direction: \((\bar{x}, \bar{y})/\bar{R} = \)
   (src_R{round(meanDirection[1], 3)},
   src_R{round(meanDirection[2], 3)})

 - \(\tilde{\theta} = \)
   src_R{round(meanDirectionRadians, 3)}

** Plot
   :PROPERTIES:
   :BEAMER_env: fullframe
   :END:

#+NAME: meanDirection
#+HEADER: :file Plots/meanDirection.png
#+BEGIN_SRC R :exports results :results output graphics
par(mar=c(0,0,0,0)+0.1, oma=c(0,0,0,0)+0.1)
plot(windc[1:3], cex=2, lwd=1.5, axes=TRUE, ticks=TRUE, tcl=0.05)
points(circular(meanDirectionRadians, units="radians", template="geographics"),
       pch=8, cex=4) 
#+END_SRC

#+CAPTION: First three observations from the wind directions data
#+CAPTION: and their sample mean direction.
#+ATTR_LaTeX: :height 0.6\textheight
#+RESULTS: meanDirection
[[file:Plots/meanDirection.png]]

* Aside: Generating from the Uniform Distribution on the Sphere

** Generating Random Points on the Sphere

 - Wish to generate a random "direction" in d-dimensions; i.e., an
   observation from the uniform distribution in the \(d-1\) sphere.
 - Usual way: let X \sim N_d(0, I) and return U = X/||X||.
 - An alternative rejection sampler:
   - Repeat until ||X|| <= 1
     - Let X be uniformly distributed on the cube [-1,1]^d
   - Return U = X/||X||
 - What is the acceptance rate for the rejection sampler:
   - Volume of the \(d - 1\) sphere is \(\pi^{d/2}/\Gamma(d/2 + 1)\)
   - Volume of [-1,1]^d is 2^d
   - Acceptance rate is \((\pi^{1/2}/2)^d/\Gamma(d/2 + 1)\)
   - Curse of dimensionality

#+BEGIN_SRC R :results output raw :exports results
accRate <- function(d) ((sqrt(pi)/2)^d)/gamma(d/2 + 1)
d <- 2:10
## ar <- matrix(accRate(d), nrow=1,
##              dimnames=list("accept rate", "d"=d))
ar <- rbind("dimension"=d, "accept rate (%)"= 100*accRate(d))
ascii(ar, digits=0, include.rownames=TRUE, include.colnames=FALSE)
#+END_SRC

#+RESULTS:
| dimension       |  2 |  3 |  4 |  5 | 6 | 7 | 8 | 9 | 10 |
| accept rate (%) | 79 | 52 | 31 | 16 | 8 | 4 | 2 | 1 |  0 |

** Code for Timing Results
   :PROPERTIES:
   :BEAMER_env: fullframe
   :END:

#+NAME: runifSphereR
#+BEGIN_SRC R :exports code
runifSphere <- function(n, dimension, method=c("norm", "cube", "slownorm")) {
    method <- match.arg(method)
    if (method=="norm") {
        u <- matrix(rnorm(n*dimension), ncol=dimension)
        u <- sweep(u, 1, sqrt(apply(u*u, 1, sum)), "/")
    } else if (method=="slownorm") {
        u <- matrix(nrow=n, ncol=dimension)
        for (i in 1:n) {
            x <- rnorm(dimension)
            xnorm <- sqrt(sum(x^2))
            u[i,] <- x/xnorm
        }
    } else {
        u <- matrix(nrow=n, ncol=dimension)
        for (i in 1:n) {
            x <- runif(dimension, -1, 1)
            xnorm <- sqrt(sum(x^2))
            while (xnorm > 1) {
                x <- runif(dimension, -1, 1)
                xnorm <- sqrt(sum(x^2))
            }
            u[i,] <- x/xnorm
        }
    }
    u
}
#+END_SRC

** Easy fix for Borel's paradox in 3-d

Take longitude \(\phi \sim U(0,2\pi)\) independent of latitude \(\theta = \arcsin(2U-1)\), \(U \sim U(0,1)\).

* Rotationally Symmetric Distributions

** Comparison of Projected Normal and Langevin Distributions

One way that we might compare the \(\nlangevin(\mu, \kappa)\) and
\(\npn(\gamma\mu, I)\) distributions by choosing \kappa and \gamma to
give the same mean resultant lengths and comparing the densities of
the cosine of the angle \theta between \(U\) and \(\mu\).

Of course matching mean resultant lengths is not necessarily the best
way to compare these families of distributions.

#+BEGIN_SRC R :exports none
### WARNING: This uses the kummerM function from the fAsianOptions
### package to calculate the mean resultant length for the projected
### normal distribution.  This fails for values of gamma greater than
### 19 or so.  Should grab a better routine, especially since we only
### need to calculated this for real arguments.

mrlPN <- function(gamma, dimen) {

    require(fAsianOptions)
    zeta <- (gamma * gamma) / 2
    hdp1 <- dimen/2 + 0.5
    hdp2 <- hdp1 + 0.5
    
    gamma * exp(-zeta + lgamma(hdp1) - lgamma(hdp2)) *
        Re(kummerM(zeta, hdp1, hdp2)) / sqrt(2)
}

imrlPN <- function(mrl, dimen, lower = 1e-5, upper = 18) {
    uniroot(function(x) mrlPN(x, dimen) - mrl, c(lower, upper))$root
}

mrlLvMF <-
    function(kappa, dimen) {
        besselI(kappa, dimen/2, expon.scaled = TRUE) /
            besselI(kappa, dimen/2 - 1, expon.scaled = TRUE)
    }

imrlLvMF <- function(mrl, dimen,
                     lower = .Machine$double.eps^0.25, upper = 1e4) {
    if ((mrl >= 0) & (mrl <= 1)) {
        try(uniroot(function(x) mrlLvMF(x, dimen) - mrl,
                    interval=c(lower, upper), extendInt = "upX")$root)
    } else {
        NA
    }
}

constLvMF <- function(kappa, dimen) {
    ( exp(-kappa)*(kappa/2)^(dimen/2 - 1) ) /
        ( gamma(dimen/2)*besselI(kappa, dimen/2 - 1, expon.scaled = TRUE) )
}

dPNAngle <- function(theta, gamma, dimen) {

### gamma = length (norm) of eta in PN(eta, I) distribution.

    ct <- cos(theta)
    st <- sin(theta)

    dnorm(gamma * st) * iternorm(gamma * ct, dimen - 1) * st^(dimen - 2) * 
                                                                 2^(dimen/2) * (dimen - 1) * gamma(dimen/2)
}

iternorm <- function(x, k) {
### 
### Computes the kth iterated integral of the normal distribution
### function.
### 
    k <- as.integer(k)
    if (k < 1) stop("k must be a positive integer (k >= 1)")
    a <- dnorm(x)
    b <- pnorm(x)
    c <- a + x * b
    if (k > 1) {
        for (i in 2:k) {
            a <- b
            b <- c
            c <- (a + x * b) / i
        }
    }
    c
}

dLvMFAngle <- function(theta, kappa, dimen) {
    exp(kappa * cos(theta)) * (sin(theta))^(dimen - 2) *
                                               (kappa^(dimen/2 - 1) /
                                                      (besselI(kappa, dimen/2 - 1) *
                                                       2^(dimen/2 - 1) * sqrt(pi) * gamma(dimen/2 - 0.5)))
}

plotPNvLvMF <- function(dimen, lwd=0.75) {

    rho <- c(0.10,0.25,0.50,0.75,0.90,0.95)
    theta <- seq(0, pi, length = 201)
    
    mulen <- sapply(rho, imrlPN, dimen = dimen)
    kappa <- sapply(rho, imrlLvMF, dimen = dimen)
    
    ypn <- outer(theta, mulen, FUN = "dPNAngle", dimen = dimen)
    yfvm <- outer(theta, kappa, FUN = "dLvMFAngle", dimen = dimen)

    lty0 <- rep(c(1,2), each = length(rho))

    matplot(theta, cbind(ypn, yfvm), type = "l",
            lty = lty0, lwd = lwd, col = 1,
            xaxt = "n", xlab = "", ylab = "")

    legend("topright", legend = c("PN", "Langevin"), lty = 1:2)

    axis(1, at = pi * (0:4)/4,
         ## labels = expression(0, , pi/2, , pi))
         labels = expression(0, pi/4, pi/2, 3*pi/4, pi))
}
#+END_SRC

#+RESULTS:

** \(d = 2\)

#+NAME: PNvLvMF2
#+HEADER: :file Plots/PNvLvMF2.png
#+BEGIN_SRC R :exports results :results output graphics
par(mar=c(2,2,0,0)+0.1, oma=c(0,0,0,0)+0.1)
plotPNvLvMF(2)
#+END_SRC

#+ATTR_LaTeX: :height 0.6\textheight
#+RESULTS: PNvLvMF2
[[file:Plots/PNvLvMF2.png]]

** \(d = 3\)

#+NAME: PNvLvMF3
#+HEADER: :file Plots/PNvLvMF3.png
#+BEGIN_SRC R :exports results :results output graphics
par(mar=c(2,2,0,0)+0.1, oma=c(0,0,0,0)+0.1)
plotPNvLvMF(3)
#+END_SRC

#+ATTR_LaTeX: :height 0.6\textheight
#+RESULTS: PNvLvMF3
[[file:Plots/PNvLvMF3.png]]

** \(d = 4\)

#+NAME: PNvLvMF4
#+HEADER: :file Plots/PNvLvMF4.png
#+BEGIN_SRC R :exports results :results output graphics
par(mar=c(2,2,0,0)+0.1, oma=c(0,0,0,0)+0.1)
plotPNvLvMF(4)
#+END_SRC

#+ATTR_LaTeX: :height 0.6\textheight
#+RESULTS: PNvLvMF4
[[file:Plots/PNvLvMF4.png]]

* Regression

** Gould's Model

   A.k.a., the [[https://commons.wikimedia.org/wiki/File:Barber-pole-01.gif#][barber pole]] model.

** Gould's Model: Likelihood

Calculate the (profile) log-likelihood for Gould (1969 Biometrics)
model for simple (single predictor) regression with an intercept.  For
fixed "slope" \beta, this function "profiles out" (maximizes over) the
"intercept" term and optionally the concentration parameter \kappa.

#+BEGIN_SRC R :exports code
loglklhd.gould <- function(beta, theta, x, do.kappa=FALSE) {
    res <- sapply(beta,
                  function(b, th, x) {
                      sqrt(sum(cos(th - b*x))^2
                           + sum(sin(th - b*x))^2)
                  },
                  th=theta, x=x)
    if (do.kappa) {
        n <- length(theta)
        kappa <- sapply(res/n, imrlLvMF, dimen=2)
        res <- n*log(constLvMF(kappa, dimen=2)) + kappa*res
    }
    res
}
#+END_SRC

#+NAME: gouldPlot
#+BEGIN_SRC R :exports none :eval no :var do.kappa=0
period <- 2*pi/(min(diff(sort(x)))) # Useful only for lattice x
nperiods <- 1
curve(loglklhd.gould(beta, theta, x, do.kappa), xname="beta", 
      xlim=beta + nperiods*period*c(-1.125,1.125), n=nperiods*200,
      xlab=expression(beta),
      ylab="Log-Likelihood")
abline(v = beta + ((-nperiods):nperiods)*period, lty=3) # for lattice x
#+END_SRC

** Gould's Model with Equally Spaced X

#+NAME: gouldLatticeXData
#+BEGIN_SRC R :exports none :eval no
alpha <- 0
beta <- 1
kappa = 2.5
x <- seq(-1, 1, length=10)
mu <- as.circular((alpha + beta*x) %% (2*pi))
theta <- as.circular(mu + rvonmises(length(mu), mu=0, kappa=kappa))
#+END_SRC

#+NAME: gouldLatticeXPlot1
#+HEADER: :file Plots/gouldLatticeX1.png :width 480 :height 480
#+BEGIN_SRC R :exports both :results output graphics :var do.kappa=0
<<gouldLatticeXData>>
<<gouldPlot>>
#+END_SRC

#+NAME: gouldLatticeXPlot2
#+HEADER: :file Plots/gouldLatticeX2.png :width 480 :height 480
#+BEGIN_SRC R :exports results :results output graphics :var do.kappa=1
<<gouldPlot>>
#+END_SRC

** Gould's Model with Equally-Spaced X: Kappa Not Profiled Out
   :PROPERTIES:
   :BEAMER_env: fullframe
   :END:

#+CAPTION: Gould's model log-likelihood with n=10 equally-spaced x's;
#+CAPTION: \kappa not profiled out.
#+ATTR_LaTeX: :height 0.8\textheight
#+RESULTS: gouldLatticeXPlot1
[[file:Plots/gouldLatticeX1.png]]

** Gould's Model with Equally-Spaced X: Kappa Profiled Out
   :PROPERTIES:
   :BEAMER_env: fullframe
   :END:

#+CAPTION: Gould's model log-likelihood with n=10 equally-spaced x's;
#+CAPTION: \kappa profiled out.
#+ATTR_LaTeX: :height 0.8\textheight
#+RESULTS: gouldLatticeXPlot2
[[file:Plots/gouldLatticeX2.png]]

** Gould's Model with Random X: Data Generation

#+BEGIN_SRC R
alpha <- 0
beta <- 1
kappa = 2.5
x <- rnorm(10)
mu <- as.circular((alpha + beta*x) %% (2*pi))
theta <- as.circular(mu + rvonmises(length(mu), mu=0, kappa=kappa))
#+END_SRC

#+NAME: gouldRandomXPlot1
#+HEADER: :file Plots/gouldRandomX1.png :width 480 :height 480
#+BEGIN_SRC R :exports results :results output graphics :var do.kappa=0
<<gouldPlot>>
#+END_SRC

#+NAME: gouldRandomXPlot2
#+HEADER: :file Plots/gouldRandomX2.png :width 480 :height 480
#+BEGIN_SRC R :exports results :results output graphics :var do.kappa=1
<<gouldPlot>>
#+END_SRC


** Gould's Model with Random X: Kappa Not Profiled Out
   :PROPERTIES:
   :BEAMER_env: fullframe
   :END:

#+CAPTION: Gould's model log-likelihood with n=10 random normal x's;
#+CAPTION: \kappa not profiled out.
#+ATTR_LaTeX: :height 0.8\textheight
#+RESULTS: gouldRandomXPlot1
[[file:Plots/gouldRandomX1.png]]


** Gould's Model with Random X: Kappa Profiled Out
   :PROPERTIES:
   :BEAMER_env: fullframe
   :END:

#+CAPTION: Gould's model log-likelihood with n=10 random normal x's;
#+CAPTION: \kappa profiled out.
#+ATTR_LaTeX: :height 0.8\textheight
#+RESULTS: gouldRandomXPlot2
[[file:Plots/gouldRandomX2.png]]



** Fisher-Lee Model: Likelihood

Calculate the (profile) log-likelihood for the Fisher-Lee (1992
Biometrics) model.  For fixed "slope" \beta, this function "profiles
out" (maximizes over) the "intercept" term and optionally the
concentration parameter \kappa.  Computing this with biggish matrix
multiplies instead of using =apply()= or looping.

#+BEGIN_SRC R :exports code
loglklhdFisherLee <- function(beta, theta, X, do.kappa=FALSE) {
    n <- length(theta)
    nbeta <- dim(beta)[2]
    if (dim(X)[1] != n) {
        stop("Number of rows of X must equal length of theta.")
    }
    if (dim(beta)[1] != dim(X)[2]) {
        stop("Number of rows of beta must equal number of columns of X")
    }
    dev <- theta - 2*atan(X %*% beta)
    res <- sqrt(apply(cos(dev), 2, sum)^2
                + apply(sin(dev), 2, sum)^2)
    if (do.kappa) {
        kappa <- sapply(res/n, imrlLvMF, dimen=2)
        res <- n*log(constLvMF(kappa, dimen=2)) + kappa*res
    }
    res
}
#+END_SRC

#+NAME: fisherLeePlot1d
#+BEGIN_SRC R :exports none :eval no :var do.kappa=0
X <- matrix(x, ncol=1)
b <- matrix(b, nrow=1)
ll <- loglklhdFisherLee(b, theta, X, do.kappa)
plot(as.vector(b), ll, type = "l",
     xlab=expression(beta),
     ylab="Log-Likelihood")
#+END_SRC

** Fisher-Lee Model with Random X: Data Generation

Note that Fisher recommends centering the x values before fitting the
model.  Here, to be certain that the model whose likelihood we plot is
equivalent to the data generating model, we will center the x values
before generating the responses.

#+BEGIN_SRC R
alpha <- 0
beta <- 1
kappa = 2.5
x <- rnorm(10)
x <- x - mean(x)
mu <- as.circular(alpha + 2*atan(beta*x))
theta <- as.circular(mu + rvonmises(length(mu), mu=0, kappa=kappa))
#+END_SRC

#+NAME: fisherLeeRandomXPlot1
#+HEADER: :file Plots/fisherLeeRandomX1.png :width 480 :height 480
#+BEGIN_SRC R :exports results :results output graphics :var do.kappa=0
b <- seq(beta - 10, beta + 10, length = 400)
<<fisherLeePlot1d>>
#+END_SRC

#+NAME: fisherLeeRandomXPlot2
#+HEADER: :file Plots/fisherLeeRandomX2.png :width 480 :height 480
#+BEGIN_SRC R :exports results :results output graphics :var do.kappa=1
b <- seq(beta - 10, beta + 10, length = 400)
<<fisherLeePlot1d>>
#+END_SRC


** FisherLee's Model with Random X: Kappa Not Profiled Out
   :PROPERTIES:
   :BEAMER_env: fullframe
   :END:

#+CAPTION: Fisher-Lee model log-likelihood with n=10 random normal x's;
#+CAPTION: \kappa not profiled out.
#+ATTR_LaTeX: :height 0.8\textheight
#+RESULTS: fisherLeeRandomXPlot1
[[file:Plots/fisherLeeRandomX1.png]]


** Fisher-Lee Model with Random X: Kappa Profiled Out
   :PROPERTIES:
   :BEAMER_env: fullframe
   :END:

#+CAPTION: Fisher-Lee model log-likelihood with n=10 random normal x's;
#+CAPTION: \kappa profiled out.
#+ATTR_LaTeX: :height 0.8\textheight
#+RESULTS: fisherLeeRandomXPlot2
[[file:Plots/fisherLeeRandomX2.png]]


** Blue Periwinkles

#+BEGIN_SRC R
periwinkles <- read.table(datafile("periwinkle.txt"), header=TRUE)
#+END_SRC

#+NAME: periwinklePlot
#+HEADER: :file Plots/periwinkles.png :width 480 :height 480
#+BEGIN_SRC R :exports results :results output graphics
plot(periwinkles$x, periwinkles$theta, ylim = c(0, 2*360),
     xlab = "Distance Moved", ylab = "Direction")
points(periwinkles$x, 360 + periwinkles$theta)
#+END_SRC

** Plot of Periwinkle Data 
   :PROPERTIES:
   :BEAMER_env: fullframe
   :END:

#+CAPTION: Direction and distance moved by 31 small blue periwinkles.
#+ATTR_LaTeX: :height 0.8\textheight
#+RESULTS: periwinklePlot


#+NAME: fisherLeePeriwinklePlot1
#+HEADER: :file Plots/fisherLeePeriwinkles1.png :width 480 :height 480
#+BEGIN_SRC R :exports results :results output graphics :var do.kappa=0
x <- periwinkles$x
x <- x - mean(x)
theta <- periwinkles$theta * (pi/180)
b <- seq(-2, 2, length=400)
<<fisherLeePlot1d>>
#+END_SRC

#+NAME: fisherLeePeriwinklePlot2
#+HEADER: :file Plots/fisherLeePeriwinkles2.png :width 480 :height 480
#+BEGIN_SRC R :exports results :results output graphics :var do.kappa=1
<<fisherLeePlot1d>>
#+END_SRC

** Fisher-Lee Model Log-Likelihood for Periwinkle Data 
   :PROPERTIES:
   :BEAMER_env: fullframe
   :END:

#+CAPTION: Fisher-Lee model log-likelihood for periwinkle data;
#+CAPTION: \kappa not profiled out.
#+ATTR_LaTeX: :height 0.8\textheight
#+RESULTS: fisherLeePeriwinklePlot1

** Fisher-Lee Model Log-Likelihood for Periwinkle Data 
   :PROPERTIES:
   :BEAMER_env: fullframe
   :END:

#+CAPTION: Fisher-Lee model log-likelihood for periwinkle data;
#+CAPTION: \kappa  profiled out.
#+ATTR_LaTeX: :height 0.8\textheight
#+RESULTS: fisherLeePeriwinklePlot2

** Fisher-Lee Model with Two Predictors

#+CAPTION: Fisher-Lee profile log-likelihood for a simulated data set
#+CAPTION: with n = 10, \kappa = 1.0, \beta_1 = 0.1, and \beta_2 = 0.1.
#+CAPTION: The global maximum is indicated by an asterisk.
#+ATTR_LaTeX: :height 0.6\textheight
[[file:Pictures/messy2.png]]

** SPML Model

Proportional coefficients yield identical directional means with
different concentrations.

#+BEGIN_SRC R :exports none
B <- array(dim=c(2,2,2,3))
dimnames(B) <- list(c("Intercept","Slope"), c("eta1", "eta2"),
                    mrlAtZero = c(0.85, 0.95), angle = c(90, 60, 30))
B[,1,1,] <- c(imrlPN(0.85, 2), 0)
B[,2,1,1] <- c(0,1)
B[,2,1,2] <- c(cos(pi/3), sin(pi/3))
B[,2,1,3] <- c(cos(pi/6), sin(pi/6))
B <- aperm(B,c(2,1,3,4))
B[,,2,] <- ( imrlPN(0.95, 2) / imrlPN(0.85, 2) ) * B[,,1,]
#+END_SRC


** SPML Coeficients: lines in 2-space
   :PROPERTIES:
   :BEAMER_env: fullframe
   :END:

#+NAME: SPMLvaryCoef1
#+HEADER: :file Plots/SPMLvaryCoef1.png :width 480 :height 480
#+BEGIN_SRC R :exports results :results output graphics
x <- 2*seq(-1,1,length=101)
eta <- apply(B,c(3,4),function(B,x)cbind(1,x)%*%B,x=x)
dim(eta) <- c(101,2,6)
omega <- apply(eta,3,function(x)atan2(x[,2],x[,1]))
rho <- sqrt(apply(eta*eta,3,function(x) x[,1]+x[,2]))
rho <- apply(rho, 2, mrlPN, dimen=2)
line.sel <- c(1,2,3,4,5,6)
lty <- c(1,1,2,2,3,3)
# lty <- 1:4
y1lim <- c(-1.1,max(eta[,1,line.sel]))
y2lim <- range(eta[,2,line.sel])
library(MASS)
# eqscplot(cos(x*pi/2),sin(x*pi/2),type="l",xlim=c(-1.2,5.4),xlim=y1lim,ylim=y2lim,xlab="y1",ylab="y2")
eqscplot(cos(x*pi/2),sin(x*pi/2),type="l",xlim=y1lim,ylim=y2lim,xlab="y1",ylab="y2")
matlines(eta[,1,line.sel],eta[,2,line.sel],lty=lty, col=1)
matpoints(eta[1,1,line.sel],eta[1,2,line.sel],pch=1, col=1)
matpoints(eta[101,1,line.sel],eta[101,2,line.sel],pch=0,col=1)
points(0,0)
arrows(0,0,1,0,size=0.075,open=T)
#+END_SRC

#+CAPTION: Two sets of lines segments with proportional coefficients,
#+CAPTION: for x ranging from -2 to 2.
#+ATTR_LaTeX: :height 0.8\textheight
#+RESULTS: SPMLvaryCoef1


** SPML Coef: mean directions as a function of x.
   :PROPERTIES:
   :BEAMER_env: fullframe
   :END:

#+NAME: SPMLvaryCoef2
#+HEADER: :file Plots/SPMLvaryCoef2.png :width 480 :height 480
#+BEGIN_SRC R :exports results :results output graphics
omega.lim <- c(-4,2)*pi/8
omega.tick <- (-4:2)*pi/8
omega.lab <- c("-p/2","","-p/4","","0","","p/4")
matplot(x,omega[,line.sel],type="l",ylim=omega.lim,xlab="x",ylab="Mean Direction",lty=lty, col=1, axes=F)
points(rep(x[1],length(line.sel)),omega[1,line.sel],pch=1, col=1)
points(rep(x[101],length(line.sel)),omega[101,line.sel],pch=0,col=1)
axis(1)
axis(2, at=omega.tick, labels=omega.lab, font=13,srt=90)
box()
#+END_SRC

#+CAPTION: Mean direction as a function of the covariate x.
#+ATTR_LaTeX: :height 0.8\textheight
#+RESULTS: SPMLvaryCoef2


** SPML Coef: mean resultant length as a function of x.
   :PROPERTIES:
   :BEAMER_env: fullframe
   :END:

#+NAME: SPMLvaryCoef3
#+HEADER: :file Plots/SPMLvaryCoef3.png :width 480 :height 480
#+BEGIN_SRC R :exports results :results output graphics
rho.lim <- range(rho[,line.sel])
rho.lim <- c(0.5,1)
matplot(x,rho[,line.sel],ylim=rho.lim,type="l",xlab="x",ylab="Mean Resultant Length",lty=lty, col=1)
points(rep(x[1],length(line.sel)),rho[1,line.sel],pch=1,col=1)
points(rep(x[101],length(line.sel)),rho[101,line.sel],pch=0,col=1)
#+END_SRC

#+CAPTION: Mean resultant length as a function of the covariate x.
#+CAPTION: Top set of three curves correspond to the set of line
#+CAPTION: segments farthest from the unit circle.
#+ATTR_LaTeX: :height 0.8\textheight
#+RESULTS: SPMLvaryCoef3
